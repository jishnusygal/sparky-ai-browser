name: 🔖 Semantic Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        type: boolean
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  semantic-release:
    name: 🚀 Semantic Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 📦 Setup Semantic Release
        run: |
          # Create package.json for semantic release if it doesn't exist
          if [[ ! -f "package.json" ]]; then
            echo "Creating package.json for semantic release..."
            cat > package.json << 'EOF'
          {
            "name": "sparky-ai-browser",
            "version": "0.0.0-development",
            "description": "🐕 An intelligent browser agent that autonomously navigates the web",
            "repository": {
              "type": "git",
              "url": "https://github.com/jishnusygal/sparky-ai-browser.git"
            },
            "keywords": ["browser-extension", "ai", "automation", "chrome-extension"],
            "author": "jishnusygal",
            "license": "MIT",
            "private": true,
            "devDependencies": {
              "@semantic-release/changelog": "^6.0.3",
              "@semantic-release/git": "^10.0.1",
              "@semantic-release/github": "^9.0.0",
              "conventional-changelog-conventionalcommits": "^6.1.0",
              "semantic-release": "^21.0.0"
            }
          }
          EOF
          fi
          
          # Install semantic release dependencies
          npm install --save-dev semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits
      
      - name: ⚙️ Configure Semantic Release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "repositoryUrl": "https://github.com/jishnusygal/sparky-ai-browser.git",
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "docs", "release": false},
                    {"type": "style", "release": false},
                    {"type": "refactor", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "test", "release": false},
                    {"type": "build", "release": "patch"},
                    {"type": "ci", "release": false},
                    {"type": "chore", "release": false},
                    {"type": "revert", "release": "patch"},
                    {"scope": "no-release", "release": false},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      {"type": "feat", "section": "✨ Features"},
                      {"type": "fix", "section": "🐛 Bug Fixes"},
                      {"type": "perf", "section": "⚡ Performance Improvements"},
                      {"type": "revert", "section": "⏪ Reverts"},
                      {"type": "docs", "section": "📚 Documentation", "hidden": false},
                      {"type": "style", "section": "🎨 Styles", "hidden": true},
                      {"type": "chore", "section": "🔧 Maintenance", "hidden": true},
                      {"type": "refactor", "section": "♻️ Code Refactoring", "hidden": false},
                      {"type": "test", "section": "✅ Tests", "hidden": true},
                      {"type": "build", "section": "📦 Build System", "hidden": true},
                      {"type": "ci", "section": "👷 CI/CD", "hidden": true}
                    ]
                  }
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md",
                  "changelogTitle": "# 📋 Changelog\n\nAll notable changes to Sparky AI Browser will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n"
                }
              ],
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "node -e \"const manifest = JSON.parse(require('fs').readFileSync('manifest.json', 'utf8')); manifest.version = '${nextRelease.version}'; require('fs').writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\\n');\""
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "sparky-ai-browser-*.zip",
                      "label": "Extension Package"
                    },
                    {
                      "path": "sparky-ai-browser-source-*.zip", 
                      "label": "Source Code"
                    }
                  ],
                  "addReleases": "bottom",
                  "draftRelease": false,
                  "releaseBodyTemplate": "## 🐕 Sparky AI Browser v{{version}}\n\n{{notes}}\n\n### 📦 Installation\n1. Download the extension package from this release\n2. Extract the zip file\n3. Load as unpacked extension in Chrome\n4. Follow the [setup guide](https://github.com/jishnusygal/sparky-ai-browser/blob/main/OAUTH_SETUP.md)\n\n### 🔗 Links\n- [Installation Guide](https://github.com/jishnusygal/sparky-ai-browser#installation)\n- [OAuth Setup](https://github.com/jishnusygal/sparky-ai-browser/blob/main/OAUTH_SETUP.md)\n- [Contributing](https://github.com/jishnusygal/sparky-ai-browser/blob/main/CONTRIBUTING.md)\n\n---\n**Sparky is ready to help you browse the web autonomously! 🚀**"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["manifest.json", "CHANGELOG.md", "package.json", "package-lock.json"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF
      
      - name: 🔍 Validate Commits
        run: |
          echo "🔍 Validating conventional commits..."
          
          # Get commits since last tag or first commit
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$last_tag" ]]; then
            commits=$(git log --pretty=format:"%s" $last_tag..HEAD)
          else
            commits=$(git log --pretty=format:"%s" HEAD~10..HEAD)
          fi
          
          # Check if commits follow conventional format
          invalid_commits=()
          while IFS= read -r commit; do
            if [[ -n "$commit" ]] && ! [[ "$commit" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?!?:\ .+ ]]; then
              invalid_commits+=("$commit")
            fi
          done <<< "$commits"
          
          if [[ ${#invalid_commits[@]} -gt 0 ]]; then
            echo "⚠️ Found commits that don't follow conventional format:"
            printf '%s\n' "${invalid_commits[@]}"
            echo ""
            echo "ℹ️ Conventional commit format: type(scope): description"
            echo "Examples:"
            echo "  feat(auth): add Google OAuth integration"
            echo "  fix(sidebar): resolve panel rendering issue"
            echo "  docs(readme): update installation instructions"
            echo ""
            echo "✅ These commits will still be processed, but consider using conventional format for better automation."
          else
            echo "✅ All commits follow conventional format!"
          fi
      
      - name: 🏷️ Run Semantic Release
        id: semantic
        run: |
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "🧪 Running semantic release in dry-run mode..."
            npx semantic-release --dry-run
          else
            echo "🚀 Running semantic release..."
            npx semantic-release
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  package-extension:
    name: 📦 Package Extension
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.semantic-release.outputs.version }}
      
      - name: 🗜️ Create Extension Packages
        run: |
          version="${{ needs.semantic-release.outputs.version }}"
          
          echo "📦 Creating extension packages for version $version..."
          
          # Create build directory
          mkdir -p build
          
          # Copy extension files
          cp manifest.json build/
          cp *.js build/
          cp *.html build/
          cp *.css build/
          cp README.md build/
          cp LICENSE build/
          
          # Create version info
          echo "Version: $version" > build/VERSION.txt
          echo "Build Date: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")" >> build/VERSION.txt
          echo "Git Commit: ${{ github.sha }}" >> build/VERSION.txt
          
          # Create extension package
          cd build
          zip -r "../sparky-ai-browser-v${version}.zip" .
          cd ..
          
          # Create source package
          zip -r "sparky-ai-browser-source-v${version}.zip" . -x "build/*" "*.zip" ".git/*" ".github/*" "node_modules/*"
          
          echo "✅ Packages created:"
          ls -la *.zip
      
      - name: 📤 Upload Packages to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.semantic-release.outputs.version }}
          files: |
            sparky-ai-browser-v${{ needs.semantic-release.outputs.version }}.zip
            sparky-ai-browser-source-v${{ needs.semantic-release.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: 📋 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [semantic-release, package-extension]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    
    steps:
      - name: 🎉 Release Summary
        run: |
          echo "## 🎉 Release v${{ needs.semantic-release.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 What was released:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.semantic-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: Automated semantic release" >> $GITHUB_STEP_SUMMARY
          echo "- **Extension Package**: Available for download" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Package**: Available for download" >> $GITHUB_STEP_SUMMARY
          echo "- **Changelog**: Automatically updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the new release" >> $GITHUB_STEP_SUMMARY
          echo "2. Consider submitting to Chrome Web Store" >> $GITHUB_STEP_SUMMARY
          echo "3. Announce the release" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor for any issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🐕 **Sparky's semantic versioning is working perfectly!**" >> $GITHUB_STEP_SUMMARY